/*
 * generated by Xtext
 */
package org.vaulttec.isis.script.formatting2;

import com.google.inject.Inject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.xbase.annotations.formatting2.XbaseWithAnnotationsFormatter;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;
import org.vaulttec.isis.script.dsl.IsisAction;
import org.vaulttec.isis.script.dsl.IsisActionFeature;
import org.vaulttec.isis.script.dsl.IsisActionParameter;
import org.vaulttec.isis.script.dsl.IsisActionParameterFeature;
import org.vaulttec.isis.script.dsl.IsisCollection;
import org.vaulttec.isis.script.dsl.IsisCollectionFeature;
import org.vaulttec.isis.script.dsl.IsisEntity;
import org.vaulttec.isis.script.dsl.IsisEvent;
import org.vaulttec.isis.script.dsl.IsisFile;
import org.vaulttec.isis.script.dsl.IsisInjection;
import org.vaulttec.isis.script.dsl.IsisProperty;
import org.vaulttec.isis.script.dsl.IsisPropertyFeature;
import org.vaulttec.isis.script.dsl.IsisService;
import org.vaulttec.isis.script.dsl.IsisUiHint;
import org.vaulttec.isis.script.services.IsisGrammarAccess;

class IsisFormatter extends XbaseWithAnnotationsFormatter {
	
	@Inject extension IsisGrammarAccess

	def dispatch void format(IsisFile isisfile, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(isisfile.getPackage(), document);
		format(isisfile.getImportSection(), document);
		format(isisfile.getDeclaration(), document);
	}

	def dispatch void format(IsisEntity isisentity, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (XAnnotation annotations : isisentity.getAnnotations()) {
			format(annotations, document);
		}
		format(isisentity.getSuperType(), document);
		for (IsisInjection injections : isisentity.getInjections()) {
			format(injections, document);
		}
		for (IsisProperty properties : isisentity.getProperties()) {
			format(properties, document);
		}
		for (IsisCollection collections : isisentity.getCollections()) {
			format(collections, document);
		}
		for (IsisAction actions : isisentity.getActions()) {
			format(actions, document);
		}
		for (IsisUiHint uiHints : isisentity.getUiHints()) {
			format(uiHints, document);
		}
	}

	def dispatch void format(IsisService isisservice, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (XAnnotation annotations : isisservice.getAnnotations()) {
			format(annotations, document);
		}
		format(isisservice.getSuperType(), document);
		for (IsisInjection injections : isisservice.getInjections()) {
			format(injections, document);
		}
		for (IsisCollection collections : isisservice.getCollections()) {
			format(collections, document);
		}
		for (IsisAction actions : isisservice.getActions()) {
			format(actions, document);
		}
	}

	def dispatch void format(IsisInjection isisinjection, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(isisinjection.getType(), document);
	}

	def dispatch void format(IsisProperty isisproperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (XAnnotation annotations : isisproperty.getAnnotations()) {
			format(annotations, document);
		}
		format(isisproperty.getType(), document);
		for (IsisPropertyFeature features : isisproperty.getFeatures()) {
			format(features, document);
		}
		for (IsisEvent events : isisproperty.getEvents()) {
			format(events, document);
		}
	}

	def dispatch void format(IsisPropertyFeature isispropertyfeature, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (XAnnotation annotations : isispropertyfeature.getAnnotations()) {
			format(annotations, document);
		}
		format(isispropertyfeature.getExpression(), document);
	}

	def dispatch void format(IsisCollection isiscollection, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (XAnnotation annotations : isiscollection.getAnnotations()) {
			format(annotations, document);
		}
		format(isiscollection.getType(), document);
		for (IsisCollectionFeature features : isiscollection.getFeatures()) {
			format(features, document);
		}
		for (IsisEvent events : isiscollection.getEvents()) {
			format(events, document);
		}
	}

	def dispatch void format(IsisCollectionFeature isiscollectionfeature, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (XAnnotation annotations : isiscollectionfeature.getAnnotations()) {
			format(annotations, document);
		}
		format(isiscollectionfeature.getExpression(), document);
	}

	def dispatch void format(IsisAction isisaction, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (XAnnotation annotations : isisaction.getAnnotations()) {
			format(annotations, document);
		}
		format(isisaction.getType(), document);
		for (IsisActionFeature features : isisaction.getFeatures()) {
			format(features, document);
		}
		for (IsisActionParameter parameters : isisaction.getParameters()) {
			format(parameters, document);
		}
		for (IsisEvent events : isisaction.getEvents()) {
			format(events, document);
		}
	}

	def dispatch void format(IsisActionFeature isisactionfeature, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(isisactionfeature.getExpression(), document);
	}

	def dispatch void format(IsisActionParameter isisactionparameter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (XAnnotation annotations : isisactionparameter.getAnnotations()) {
			format(annotations, document);
		}
		format(isisactionparameter.getType(), document);
		for (IsisActionParameterFeature features : isisactionparameter.getFeatures()) {
			format(features, document);
		}
	}

	def dispatch void format(IsisActionParameterFeature isisactionparameterfeature, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (XAnnotation annotations : isisactionparameterfeature.getAnnotations()) {
			format(annotations, document);
		}
		format(isisactionparameterfeature.getExpression(), document);
	}

	def dispatch void format(IsisUiHint isisuihint, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(isisuihint.getExpression(), document);
	}
}
